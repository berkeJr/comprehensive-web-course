300.Giriş
301.Node.Js kurulumu
304.Create-react-app kurulumu
305.İlk react projemizin oluşturulması 
306.React Component Mimarisi
307.İlk Component'lerimizi Oluşturalım
308.ReactStrap ile Çalışmak

---------------------------------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------------------------------

301.Node.Js kurulumu:
--- Node.Js kurulumu: Node.js JavaScript kodunun server kısmında çalışmasından tutun (server-side) ayrıca paket yönetimi 
ve geliştirme ortamı sunuyor. Biz bu eğitimimiz boyunca node'un sağladığı bu imkanları kullanıyor olacağız. 

-- İnternet üzerinden node.js.org adresinden node'u indirmemiz gerekiyor. Oradan indirelim.

---------------------------------------------------------------------------------------------------------------------------

304.Create-react-app kurulumu:
--- Son bir kurulum daha yapacağız. Bu kurulum ise create-react-app isimli bir uygulama aslında. Bu react'ı geliştiren
facebook tarafından resmi olarak yayınlanan bir uygulama. Bu, bizim hızlıca react ugulamaları oluşturabilmemizi
sağlıyor. Bunu da şu şekilde kurarız. Vs Code'da terminali açalım. Terminal bizim için komut satırı oluşturuyor. 
Bu komut satırı aracılığıyla biz komutlarımızı çalıştırabiliyoruz. Terminale şunu yazalım; 

npm install -g create-react-app

-g koymazsak bu şu anlama gelir. Ben bunu sadece bu klasöre kurmak istiyorum(terminaldeki dizin). -g ise global demek. 
yani biz create-react-app kodunu nereden çalıştırırsa çalıştıralım erişebiliriz demek. Yani klasör bağımsız, buna global
kurulum diyoruz. 

create-react-app ile artık biz react uygulamalarını geliştirebileceğimiz ortam için, ilk etapta bizim için 
hızlıca başlamamızı sağlayacak proje şablonunu bu komut vasıtasıyla hızlıca oluşturabileceğiz.

---------------------------------------------------------------------------------------------------------------------------

305.İlk react projemizin oluşturulması:

--- Şimdi ise ilk react projemizi oluşturalım. Terminali açtıktan sonra şu komudu yazalım: 

-- İlk önce terminalde (command promp'ta) proje klasörümüze locate olup olmadığımızı kontrol etmemiz gerekli. 

-- Örneğin biz şu an comprehensive-web-course klasörü içerisindeyiz;
C:\Users\Berke\Desktop\Software Tools\comprehensive-web-course

-- Daha sonra 5.react-course klasörüne gideriz
C:\Users\Berke\Desktop\Software Tools\comprehensive-web-course>cd 5.react-course

-- Şu komudu yazarak react projemizi oluşturalım
npx create-react-app intro

-- Not: cd.. komutu dizinde bir klasör geri gider. 

-- Şu anda intro klasörümüz oluştu. Bu klasör içerisinde oluşan package.json dosyası bizim node paket yönetimi
üzerinden kurduğumuz paketlerimizin aslında konfigürasyon dosyası. Bu dosyayla ilerleyen zamanlarda biz sıklıkla uğraşıyor
olacağız. 

-- peki npm(node package manager) nedir? Biz internetten npm'in resmi sitesine gideriz: www.npmjs.com Orada bütün
paketler bulunuyor. Yani açık kaynak yazılım geliştirenler istedikleri javascript paketlerini yazıyorlar, buraya 
yüklüyorlar ve bizde npm install diyerek bu paketleri indirip kullanıyoruz. Örneğin react paketini oradan 
indirebiliyoruz.

-- tekrardan terminalde intro klasörümüze locate olalım. 

-- locate olduktan sonra bizim yapmamız gereken npm start komutunu yazmak. npm start bizim için intro klasöründeki
bu projeyi geliştirme ortamında node üzerinde yayına alıyor. Yani tarayıcıda localhost:3000 portunda projemizi yayına
alıyor. 

-- Örneğin intro klasöründe src klasörü içerisine bakalım. Orada bizim için proje kodları bulunuyor. İlk etapta App.js 
isimli bir dosya göreceğiz. Orada app isimli bir function var. Onun içerisindeki div'in içindeki tüm kodları silelim
sadece div kalsın. Onun içerisine <h3>Hello from react!</h3> yazalım.

function App() {
  return (
    <div>
      <h3>Hello from react!</h3>
    </div>
  );
}

Yani artık react ile tarayıcıda Hello from react! yazdırdık. 

-- Daha sonra mesela src klasörü içerisinde App.css dosyası da var. Bu az önce var olan App.js uygulamasının css dosyası.
Onu silebiliriz. 

-- App.css sil

-- Daha sonra App.js dosyasındaki "import './App.css';" kısmını da silelim. 

-- App.test.js dosyası 

-- logo.svg dosyası 

-- App.js dosyasındaki "import logo from './logo.svg';" kısmı

-- index.css dosyası 

-- index.js içerisindeki "import './index.css';" kısmını da silelim

Bu dosyaları silelim

-- App.js dosyasında en üste şunu yazabiliriz: import React from 'react'

-- Yani şimdiye kadar src klasörü içerisindeki App.js ile çalıştık. 


---------------------------------------------------------------------------------------------------------------------------

301 - 304 - 305 tekrar 

1. npm install -g create-react-app: genel global kurulum: bir sefer

2. react'ı kurmak istediğin klasöre terminalde locate ol.

3. locate olduktan sonra: npx create-react-app project-name(folder-name)
react projesini oluşturur. src klasörü içerisindeki App.js'ye react kodlarımızı yazabiliriz.

4.App.js içerisindeki örnek react kodu: 
import React from 'react';

function App() {
  return (
    <div>
      <h3>Hello from react!</h3>
    </div>
  );
}

export default App;

5. react kodunu tarayıcıda görüntülemek için terminale şu komudu yaz: npm start 

---------------------------------------------------------------------------------------------------------------------------

306. React Component Mimarisi

--- React dünyasında bizim için en önemli yapı, component dediğimiz yapıdır. Component mimarisini bizim iyi anlamamız
gerekiyor. Peki nedir bu react'ın komponent yapısı. Şöyle ki biz uygulamalarımızı componentlere bölüyoruz. Yani component  
demek bileşen demek. React bir SPA, yani single page application yani tek sayfa uygulamasıdır. Şöyle ki bizim aslında tek 
bir sayfamız var. İşte bu sayfamız bizim için bir component görevi görecek. Yani olay temel bir component'le başlıyor. 
Daha sonra mesela bu kapsayıcı component içerisinde bizim bir navigation bar'ımız var. Onu da bir component olarak
oluşturuyoruz. Sonra sol tarafta başka bir menü var, onun için de bir component, sonra sağ tarafta bir menü 
oluşturalım o da bir component. Daha sonra mesela nav-bar'da bir logi-in yapısı oluşturmak istiyoruz, o da bir component.
Yani biz iç içe componentlerle sayfalarımızı yapılandırıyoruz. Tabii ki yeri geldiğinde o componentleri değiştirebiliriz.
Örneğin bir componenti kaldırıp onun yerine bambaşka bir component ekleyebiliriz. Bu da routing dediğimiz bir yapıyla oluyor.


-- React'ta sıkıntı bu componenent'leri birbiri ile görüştürmek. Nedir bu peki? Mesela bir sayfa içerisinde farklı kategoriler
için farklı componentler var. Örneğin sol taraftaki menu-bar'da category componenti olsun, sağ taraftaki menu-bar'da da 
ürünler kategorisi olsun. Biz sol taraftaki menu'de herhangi bir kateegoriye tıklayınca sağ taraftaki menu de ürünlerin
değişmesini istiyoruz. İşte react tarafında en büyük sıkıntı bu, yani bir componentten diğerine veri transferi. 


-- React tarafında şöyle bir basit yapı var. Üst component(kapsayıcı olan) alt componenente veri taşıyabiliyor. Ama alt 
componenent üst componenente veri taşıyamıyor. 

---------------------------------------------------------------------------------------------------------------------------

307.İlk Component'lerimizi Oluşturalım:

-- Component mimarisini anladık, şimdi de component'in kendi yapsını anlayalım. Component'ler bir kaç şekilde oluyor. 

- Fonksiyon component'ler
- Class componentler 
- React-Hooks denilen yapı ile oluşturulan componenentler

Not: JavaScript'te fonksiyonlar; C#, Java gibi dillerdeki fonksiyonlarla benzerdir. Ayrıca JS'de fonksiyonlar da bir
tiptir. Yani int gibi, string gibi, fonksiyonlarda birer tiptir. Bu özelliği vasıtasıyla JS'de bambaşka bir ortam oluşuyor.


function App() {
  return (
    <div className="App">
        <h3>Hi there! It's Berke, Welcome to React!</h3>
        <h4>Deneme</h4>
    </div>
  );
  /**Burada return işlemi direkt olarak bir parantezle başlıyor. Burada bir .jsx yapısı var.  Yani JavaScript XML 
   * dediğimiz yapı var. Bu react'ta jsx yapısıdır. Peki nedir bu jsx yapısı? React aslında bir kütüphane ve arayüz
   * oluşturmaya yönelik kolaylıklar sağlıyor. O da react'ın en önemli yapısı. Yani .jsx yapısı. Normalde return 
   * içerisindeki ifadenin HTML'den bir farkı yok gibi gelebilir. Buradaki div aslında HTML olarak render ediliyor, 
   * yani biz html'deki div'i ve diğer elementleri aynen burada da kullanabiliyoruz, ama aslında buradaki yapı tam olarak
   * jsx yapısıdır. Yani bu div'in react kütüphanesinde bir karşılığı var. Ayrıca örneğin biz bu diV'in altında, dışında
   * bir h3 elementi oluşturursak hata verir. Örneğin bir div elementi var açılıp kapanıyor, biz onunla aynı hiyerarşide 
   * yani ona kardeş bir h3 element oluşturamayız. Yani bizim bir ana container tag'ımız olacak(div) biz onun içerisine 
   * yazacağız. 
   */   
}

Peki biz şimdi ilk componenentimizi oluşturmak istiyoruz. Componentimizi class componenti olarak oluşturacağız. 
intro klasörü içindeki src klasörü üzerinde sağ tıklayalım ve new file diyelim. Buraya geldiğimizde biz başka
bir componenti bu App içerisine yerleştireceğiz. Ana componentimiz bizim App'miz. Ana componenentimiz içerisine biz başka
bir component ekleyebiliriz. Yani olaya ana component'ten başlıyoruz. Örneğin App içerisinde, ana component, ana yapı
içerisinde bir navbar oluşturup onun da altında yan yana iki menü oluşturmak istiyoruz. Yani bizim App componenti
içerisinde 3 tane daha componente ihtiyacımız var. Componentlerin isimlendirilmeleri Pascal case, yani kelimelerin
ilk harfleri büyük harflerden oluşuyor. Src klasöründe sağ tıklayıp new file dedikten sonra file'ın adını Navi.js
yapalım. 

// Navi componentini App.js içerisine ekleyelim

import React from 'react'
// Navi componentini kullanabilmek için import etmemiz gerekli. 
import Navi from './Navi'

function App() {
  return (
    // Navi componentini burada kullanabiliriz. (div içerisinde)
    <div>
         <Navi></Navi>
         <Navi></Navi>
         <Navi/>
         <Navi/>
    </div>
  );

// Şimdi 2 tane daha component ekleyelim. CategoryList.js, ProductList.js


-- App.js ana componentimiz, 
-- Navi.js, CategoryList.js ve ProductList.js ana component içerisinde kullandığımız componentler
-- Daha sonra ise bu componentleri şekillendireceğiz. Onun içinde css veya farklı kütüphaneler kullanacağız.

---------------------------------------------------------------------------------------------------------------------------

308.ReactStrap İle Çalışmak:

-- ReactStrap, React yapısına uygun olarak Bootstrap'in kullanılmasına olanak sağlayan bir kütüphane. Aslında 
bootstrap kullanıyor, ReactStrap ile bunu güzel componentler haline getirmişler. Biz de onu kullanabliiyoruz. Biz 
istersek direkt olarak bootstrap de kullanabiliriz, istersek ReactStrap ile beraber de kullanabiliriz ama react
dünyasında yaygın olarak bu tip kütüphaneleri kullanmak söz konusudur. ReactStrap dışında bir çok farklı kütüphaneler de
mevcut. 

-- ReactStrap resmi docs sayfası: https://reactstrap.github.io/

-- Peki biz reactstrap'i projemize nasıl dahil ederiz? Bunun için 2 yol vardır.

-- Yöntem 1: package.json dosyasına gidelim. Orada dependencies kısmı var: 
"dependencies": {
    "@testing-library/jest-dom": "^5.16.1",
    "@testing-library/react": "^11.2.7",
    "@testing-library/user-event": "^12.8.3",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "4.0.3",
    "web-vitals": "^1.1.2"
  },

- Bu kısımda bulunan react ile ilgili ifadeler biz create-react-app komutunu çalıştırınca geldiğimizde

- Biz süslü parantez içerisinde en alta "reactstrap": "8.0.0" yazarak ve daha sonra command prompt'ta 
npm install komudunu çalıştırarak reactstrapı intro projemize  dahil edebiliriz. 

- npm install komudu package.json dosyasında yapılan değişiklikleri kaydeder, günceller. 

-- Yöntem 2: Command prompt'a geliriz. intro klasörümüze locate oluruz. Ve şu komudu yazarız:
npm install reactstrap

- Bu komut bizim için reactstrapi kurar ve de package.json dosyasında reactstrap eklendiğini görebiliriz.

- Bu paketler bizim için intro klasörü içindeki node_modules klasörüne ekleniyor. 

- Peki biz bu şlemi gerçekleştirdikten sonra reactstrap'i uygulamamıza nasıl dahil ederiz? Nasıl kullanırız?
index.js dosyasına geliyoruz ve şöyle bir kod yazıyoruz: 


import 'bootstrap/dist/css/boostrap.min.css';  // reactstrap'i kullanabilmek için dahil etmeliyiz.

index.js ye bu kodu yazdıktan sonra biz react ile hem bootstrap'i hem de reactstrap'i kullanabiliriz. Yani sıkıştığımız
zaman reactstrap'te bulamadığımızın karşılığını bootstrap'te bulup kullanabiliriz. 

-- Peki index.js ne?
index.js bizim ana javascript konfigürasyon dosyamız. index.js'de hangi componentin ana component olduğunu
görebiliriz.(App.js) 


-- index.js'ye reactstrapi dahil ettik. peki biz App.js içerisinde bu reactstrap'i nasıl kullanırız?

- App.js dosyasına reactstrap'i ve reactstrap ile birlikte kullandığımız elementleri dahil ederiz.
import {Container, Row} from 'reactstrap';

- Daha sonra da Container, row elementlerini App.js'de return fonksiyonu içinde bulunan div içerisinde kullanırız

- Örenğin Navi componentini ilk row içerisine, CategoryList ve de ProductList componentlerini de 
ikinci row içerisine koyalım. 

- Son olarak elememiz gereken bir şey daha var. ReactStrap dependency olarak bootstrapi otomatik olarak getirmiyor. 
Ona bağlı ama onu kurmuyoer. Bu yüzden npm install bootstrap'de demeliyiz. 

- Biz şimdi şöyle bir tasarım istiyoruz: 
Navbar yukarıda olsun, onun altında CategoryList ile ProductList olsun, 
ProductList biraz daha geniş olsun. 
Bunun içinde bootstrap'deki colon mimarisini kullanacağız. 

-- Daha sonra reactstrap docs sayfasında list group alanına gidelim
Oradan list group item kodlarından birini alıp CategoryList'te Category List kolonu altına yapıştıralım