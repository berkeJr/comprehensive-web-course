313.Componentler Arası Veri ve Event Transferi 

-- Şimdi ise Componentler arası veri transferine geçiş yapalım. Şöyle ki, bu kısım react tarafındaki zorlanılan kısımlardan
birisi. Bizim şimdi bir tane App'miz vardı ve onun içerisinde Navi, CategoryList ve ProductList componentlerimiz 
bulunuyordu. 

-- Bizim sol tarafta CategoryList componentimiz, onun sağında ise ProductList componentimiz bulunuyor. Bizim istediğimiz şey
şu; biz sol tarafta Category List içinde örneğin Beverages'a tıklayınca, sağ tarafta Product List'in altında Beverages'e 
ait item'ların gelmesini istiyoruz. Yani biz Category List içindeki nesneye tıklayınca oradaki bilginin Product List'e de 
gitmesini istiyoruz. 

-- Hatırlatma: Biz react'ta şu an CategoryList'ten ProductList'e data taşıyamıyoruz, sadece App.js'den yani ana kapsayıcı
componentten onun içindeki componentlere veri taşıyabiliyoruz. 

-- Yani biz App'den ProductList'e data taşıyabiliyoruz, peki bu durumda bizim CategoryList'den ProductList'e data
taşımamız gerekli, o zaman ne yapacağız? Şu anda bunu saf React kullanarak yapacağız, sonrasında ise React'taki 
Redux ile state management yapısını kullanarak daha farklı noktaya getireceğz. 

-- App.js sayfasına gelelim. Orada biz gerekli olan işlemlerimizi function App() fonksiyonu içerisinde yazmıştık. Şimdi
biz o fonksiyonu öncelikle bir class componente çevireceğiz. Yani o fonksiyon içerisindeki bilgileri App class component 
oluşturup onun içine yazıp, o fonksiyonu da sileceğiz. 

export default class App extends Component {
  categoryInfo = { title: "CategoryList", baskaBirSey: "birSey" };
  productInfo = { title: "ProductList" };
  // fonksiyon içinde olmadığımız için değişken tanımlarken let kullanmayız.

  render() {
    return (
      <div>
        <Container>
          <Row>
            <Navi />
          </Row>

          <Row>
            <Col xs="3">
              <CategoryList info={categoryInfo} />
            </Col>

            <Col xs="9">
              <ProductList info={productInfo} />
            </Col>
          </Row>
        </Container>
      </div>
    );
  }
}

-- Daha sonra App.js'de bulunan 
import React from "react"; kısmını silelim 

Ve de App.js'ye 
import React, { Component } from "react"; kısmını ekleyelim 


--  let categoryInfo = { title: "CategoryList", baskaBirSey: "birSey" };
    let productInfo = { title: "ProductList" };
değişkenlerini de render() fonksiyonu içerisine yazalım. 


-- Şu anda kodumuz aynen çalışır. Biz sadece function App() yapısını class componente çevirdik. Çünkü
biz CategoryList.js'de yazdığımız changeCategory kodunu mecburen bu App içerisinde taşıyacağız. 

-- CategoryList.js'ye gidelim ve şu kısmı keselim: 
  changeCategory = (category) => {
    this.setState({ currentCategory: category.categoryName });
  };

-- Kestiğimiz o kısmı, changeCategory kısmını App.js'de class componenti içerisine koyalım. Yani şu anda 
App class componenti içerisinde bir fonksiyon render() bir fonksiyon da changeCategory() fonksiyonu oldu. 

-- Biz onClick eventini kullanmıştık(changeCategory() fonksiyonu ile). Şu anda changeCategory() fonksiyonunu 
CategoryList'ten alıp, App.js ye taşıdık, o yüzden changeCategory'yi App.js'de return içerisinde CategoryList'e
props olarak yollamamız gerekli. 
<CategoryList changeCategory={this.changeCategory} info={categoryInfo} />

-- Ayrıca CategoryList.js'ye gidelim, orada onClick içerisinde fonksiyona 
this.props.changeCategory(category) yazalım

-- Ayrıca CategoryList.js içerisinde state içindeki 
currentCategory: ""
kısımı kesip App componentinde bir state içerisinde yazalım 

-- Sonra ise App componenti içindeki CategoryList'e currentCategory'yi de yollayalım
<CategoryList currentCategory={this.state.currentCategory} changeCategory={this.changeCategory} info={categoryInfo} />

-- Son olarak CategoryList.js'de return içerisinde şunu yazalım: 
<h4>{this.props.currentCategory}</h4>

-- Biz şimdiye kadar şunu yaptık. 

* CategoryList'teki changeCategory'yi App.js içerisinde App class componenti oluşturup orada yazdık. Çünkü biz 
currentCategory yazısını ProductList'e de geçmek istiyoruz. React'te sadece ana kapsayıcı component'ten içteki 
componente taşıma olduğu için kategori değiştirmeye yönelik her şeyi App içerisine taşıdık. 

* Daha sonra App.js içerisinde changeCategory() fonksiyonunu App.js return içindeki CategoryList'e props olarak kullandık. 

* Daha sonra CategoryList'te 
this.props.changeCategory(category)
ile eventi kullandık. 

* Daha sonra currentCategory'yi de App.js'de return içindeki CategoryList'e props olarak yolladık
currentCategory={this.state.currentCategory}

* Daha sonra ise CategoryList'te props ile currentCategory'yi yazdırdık. ,
<h4>{this.props.currentCategory}</h4>


Note: State değiştiği anda o state'i kullanan tüm componentler yeniden render edilir. Örneğin currentCategory.

-- Biz böylelikle currentCategory'yi alıp App.js içindeki ProductList'e de taşıyabiliriz. 
<ProductList currentCategory={this.state.currentCategory}

-- Ve son olarak da ProductList.js sayfasına gidip : this.props.currentCategory'yi de kullanırız. 
<h3>{this.props.info.title}-{this.props.currentCategory}</h3>

